
#*
================================================================================

1. This template is for the module-level header file u_<module>_reg_access.h.
   The base unit is 32-bit (i.e. 32-bit for mem and emptyspace).
2. No renaming is required on the output files after compilation, as the legacy
   module name already contains the prefix "u_".
3. This template works very well for both FM2 and PG4 because no register name
   has to get prefixed with any string related to the project name/code.
4. This tempalte supports two-level register declaration only excluding the top
   level. However, only one of the 2nd or 3rd level is allowed to be repeated
   due to only one address index is used throughout the pre-defined format.
5. The object types and tree hierarchy of a module/block object are as follows.

   1st => (TOP = the module/block)
            |
   2nd =>   +-------(reg)--------(reggroup)--------(mem)--------(emptyspace)
                                     |               |
   3rd =>                           reg             reg
                                 emptyspace     emptyspace(?)
6. The reggroup-inside-reggroup cases exist in XML exclusively (i.e. the object
   "obj3" in this template) due to the format issue

Cheader Ver 3.2
================================================================================
*#
/*----------------------------------------------------------------------------------------------

****************************************************************************
 *
 *  Product Name    :   chip_csr
 *  Entry Point Name:   chip_csr_APB
 *
 ******************************************************************************/

#set($top=$ids.get_top())
#set($top_name=$ids.get_prop($top,"name"))
#set($top_name=$top_name.replace("_csr", ""))
#set($top_name=$top_name.replace("_CSR", ""))
#set($child=$ids.get_objects($top))
#set($put="include")
#set($def="define")
#set($hash="#")
#set($INT=0)


/******************************************************************************

    Copyright 2018 Micron Technology, Inc. All Rights Reserved.
    This software contains confidential information and trade secrets of
    Micron Technology, Inc.  Use, disclosure, or reproduction is prohibited
    without the prior express written permission of Micron Technology, Inc.

    Purpose:
    <Put purpose here>

    Description:
    <Put description here>

******************************************************************************/


${hash}ifndef __GLOBAL_INSTANCES_H
${hash}define __GLOBAL_INSTANCES_H

${hash}ifdef __cplusplus
extern "C"
{
#endif

 /****************************************************************************
 *
 *  MACRO         BW_NUM_INSTANCE
 *
 *  DESCRIPTION   Total number of leaf instances of chip_csr
 *
 *****************************************************************************/

#set($count=0)
#if($ids.get_type($top)=="board")
#foreach($chip in $ids.get_objects($top))
#if($ids.get_type($chip)=="chip")
#foreach($block in $ids.get_all_block($chip))
#set($count=$count+1)
#end
#end
#end
#elseif($ids.get_type($top)=="chip")
#foreach($block in $ids.get_all_block($top))
#set($count=$count+1)
#end
#elseif($ids.get_type($top)=="block")
#set($count=1)
#end


 ${hash}define BW_NUM_INSTANCES          ${count}



/****************************************************************************
 *
 *  MACRO         BW_{instance_name}_ADDRESS
 *
 *  DESCRIPTION   Physical addresses for each component instance of chip_csr
 *
 ****************************************************************************/

#if($ids.get_type($top)=="board")
#set($boardName=$ids.get_prop($top,"name"))
#set($addressBoard=$ids.get_prop($top,"address"))
#foreach($chip in $ids.get_objects($top))
#if($ids.get_type($chip)=="chip")
#set($linkName=$ids.get_prop($chip,"link"))
#set($chipkName=$ids.get_prop($chip,"name"))
#set($addressChip=$ids.get_prop($chip,"address"))
#foreach($block in $ids.get_all_block($chip))
#if($ids.get_type($block)=="block")
#if($linkname.equals(" "))
#set($blockName=$linkname)
#else
#set($blockName=$ids.get_prop($block,"name"))
#end
#set($blockName=$blockName.replace("_csr", ""))
#set($blockName=$blockName.replace("_CSR", ""))
#set($addressval=$ids.get_prop($block,"address"))
${hash}${def} BW_${chipkName.toUpperCase()}_${blockName.toUpperCase()}_ADDRESS     ${addressval}
#end
#end
#end
#end



#elseif($ids.get_type($top)=="chip")
#if($linkname.equals(" "))
#set($chipkName=$linkname)
#else
#set($chipName=$ids.get_prop($top,"name"))
#end
#set($addressChip=$ids.get_prop($top,"address"))
#foreach($block in $ids.get_all_block($top))
#if($ids.get_type($block)=="block")
#set($blockName=$ids.get_prop($block,"name"))
#set($addressval=$ids.get_prop($block,"address"))
${hash}${def} BW_${blockName.toUpperCase()}_ADDRESS            ${addressval}
#end
#end

#elseif($ids.get_type($top)=="block")
#if($linkname.equals(" "))
#set($blockName=$linkname)
#else
#set($blockName=$ids.get_prop($top,"name"))
#end
#set ($addressvalblock=$ids.get_prop($top,"address"))
${hash}${def} BW_${blockName.toUpperCase}_ADDRESS
#end

/****************************************************************************
 *
 *  TYPE          BW_inst_index_t
 *
 *  DESCRIPTION   This emueration list allows indexing the BW_instance_info_t
 *                structure arrays using the component instance name identifier
 *
 ****************************************************************************/

 typedef enum BW_inst_index
 {
#if($ids.get_type($top)=="board")
#set($flag=0)
#foreach($chip in $ids.get_objects($top))
#if($ids.get_type($chip)=="chip")
#set($linknme=$ids.get_prop($chip,"link"))
#set($chipkName=$ids.get_prop($chip,"name"))
#foreach($block in $ids.get_objects($chip))
#if(($ids.get_type($block)=="block"))
#set($blockName=$ids.get_prop($block,"name"))
#set($blockName=$blockName.replace("_csr", ""))
#set($blockName=$blockName.replace("_CSR", ""))
#if($flag!=0),#end BW_${chipkName}_${blockName}
    #set($flag=$flag+1)
#end
#end
#end
#end
#end

  #if($ids.get_type($top)=="chip")
  #foreach($block in $ids.get_objects($top))
  #if($ids.get_type($block)=="block")
  #if($linkname.equals(" "))
  #set($blockName=$linkname)
  #else
  #set($blockName=$ids.get_prop($block,"name"))
  #end
  BW_${blockName},
  #end
  #end
  #end

  #if($ids.get_type($top)=="block")
  #set($blockName=$ids.get_prop($top,"name"))
  BW_$blockName
  #end

 } BW_inst_index_t;


/****************************************************************************
 *
 *  VARIABLE      BW_inst_addr
 *
 *  DESCRIPTION   Array of physical adresses of component instances
 *                This array can be indexed by the BW_inst_index_t enumeration
 *                values
 *
 ****************************************************************************/
extern UINT32 BW_inst_addr[BW_NUM_INSTANCES];

/****************************************************************************
 *
 *  VARIABLE      BW_inst_name
 *
 *  DESCRIPTION   Array of names of component instances
 *                This array can be indexed by the BW_inst_index_t enumeration
 *                values
 *
 ****************************************************************************/
extern const char* BW_inst_name[BW_NUM_INSTANCES];

#ifdef __cplusplus
}
#endif
#endif  /* __GLOBAL_INSTANCES_H */
















