
#set($top=$ids.get_top())
$ids.get_header($top)
#set($INT=0)

##########################################################
##            Main Body for SV header                     #
##            Ver 1.5                                     #
##########################################################
#set($topname=$ids.get_prop($top,"name"))

##for Chip
#if($ids.get_type($top)=="chip")
#set($TopAddrWidth = $ids.get_addr_width($top))
#set($truncTopAddrWidth = ($INT.parseInt($TopAddrWidth) - 1))
parameter logic [${truncTopAddrWidth}:0] ${topname.toUpperCase()}_ADDR = ${TopAddrWidth}'h${ids.get_prop($top,"address").replace("0x","")};
#foreach($chipchild in $ids.get_objects($top))
#if($ids.get_type($chipchild)=="block")
#foreach($blockchild in $ids.get_objects($chipchild))
#if($ids.get_prop($blockchild,"is_rsv") != "true")
#if($ids.get_type($blockchild)=="reg")
#regDefine($blockchild $TopAddrWidth)
#elseif($ids.get_type($blockchild)=="mem")
#memDefine($blockchild $TopAddrWidth)
#elseif($ids.get_type($blockchild)=="reggroup")
#SecDefine($blockchild $TopAddrWidth)
#end
#end
#end
#end
#end
#end

##for Block
#if($ids.get_type($top)=="block")
#set($BlockAddrWidth = $ids.get_addr_width($top))
#set($truncBlkAddrWidth = ($INT.parseInt($BlockAddrWidth) - 1))
parameter logic [${truncBlkAddrWidth}:0] ${topname.toUpperCase()}_ADDR = ${BlockAddrWidth}'h${ids.get_prop($top,"address").replace("0x","")};
#foreach($blockchild in $ids.get_objects($top))
#if($ids.get_prop($blockchild,"is_rsv") != "true")
#if($ids.get_type($blockchild)=="reg")
#regDefine($blockchild $BlockAddrWidth)
#elseif($ids.get_type($blockchild)=="mem")
#memDefine($blockchild $BlockAddrWidth)
#elseif($ids.get_type($blockchild)=="reggroup")
#SecDefine($blockchild $BlockAddrWidth)
#end
#end
#end
#end

## Start Define For Register
#macro(regDefine $regObj $addrWidth)
#set($childname=$ids.get_prop($regObj,"name"))
#set($truncRegAddrWidth = ($INT.parseInt($addrWidth) - 1))
parameter logic [${truncRegAddrWidth}:0] ${ids.getUniqueName($regObj,"block").toUpperCase()}_ADDR = ${addrWidth}'h${ids.get_prop($regObj,"address").replace("0x","")};
#end
## End Define For Register

## Start Define For Memory
#macro(memDefine $memObj $addrWidth)
#set($truncMemAddrWidth = ($INT.parseInt($addrWidth) - 1))
parameter logic [${truncMemAddrWidth}:0] ${ids.getUniqueName($memObj,"block").toUpperCase()}_ADDR = ${addrWidth}'h${ids.get_prop($memObj,"address").replace("0x","")};
#end
## End Define For Memory

## Start Define For Section
#macro(SecDefine $secObj $addrWidth)
#set($truncSecAddrWidth = ($INT.parseInt($addrWidth) - 1))
parameter logic [${truncSecAddrWidth}:0] ${ids.getUniqueName($secObj,"block").toUpperCase()}_ADDR = ${addrWidth}'h${ids.get_prop($secObj,"address").replace("0x","")};
#foreach($SecChild in $ids.get_objects($secObj))
#if($ids.get_type($SecChild)=="reg")
#regDefine($SecChild $addrWidth)
#end
#if($ids.get_type($SecChild)=="reggroup")
#SecDefine($SecChild $addrWidth)
#elseif($ids.get_type($SecChild)=="mem")
#memDefine($SecChild $addrWidth)
#end
#end
#end
## End Define For Section

