#set($top=$ids.get_top())
$ids.get_header($top)

##########################################################
##            Main Body for SV header                     #
##            Ticket : 6800                               #
##########################################################
#set($topname=$ids.get_prop($top,"name"))
`ifndef __${topname.toUpperCase()}_SVH
`define __${topname.toUpperCase()}_SVH

##for Board Headers
#if($ids.get_type($top)=="board")
#BoardDefine($top $top)
#end

##for Chip Headers
#if($ids.get_type($top)=="chip")
#ChipDefine($top $top)
#end

##for Block Headers
#if($ids.get_type($top)=="block")
#BlockDefine($top $top)
#end

`endif // __${topname.toUpperCase()}_SVH

## ------------ MACROS -----------------
##

## Start Define For board
#macro(BoardDefine $BoardObj $TopNodeBoard)
#set($UniqueBoardName=$ids.getUniqueCompName($BoardObj,$TopNodeBoard))
`define ${UniqueBoardName.toUpperCase()}_ADDR 'h$ids.convertToIDSType($ids.get_prop($BoardObj,"offset"))
`define ${UniqueBoardName.toUpperCase()}_SIZE 'h$ids.convertToIDSType($ids.get_prop($BoardObj,"size"))
##for Chip
#foreach($chipchild in $ids.get_objects($BoardObj))
#if($ids.get_type($chipchild)=="chip")
#ChipDefine($chipchild $TopNodeBoard)
#end
#end
#end
## End Define For board

## Start Define For Chip
#macro(ChipDefine $ChipObj $TopNodeChip)
#set($UniqueChipName=$ids.getUniqueCompName($ChipObj,$TopNodeChip))
#if($ChipObj == $TopNodeChip)
`define ${UniqueChipName.toUpperCase()}_ADDR 'h0
`define ${UniqueChipName.toUpperCase()}_SIZE 'h$ids.convertToIDSType($ids.get_prop($ChipObj,"size"))
#else
#set($parentNodeChip=$ids.get_parent($ChipObj))
#set($UniqueChipParentName=$ids.getUniqueCompName($parentNodeChip,$TopNodeChip))
#set($UniqueChipTopName=$ids.get_prop($TopNodeChip,"name")+"_"+$ids.getUniqueCompName($ChipObj,$TopNodeChip))
`define ${UniqueChipTopName.toUpperCase()}_ADDR `${UniqueChipParentName.toUpperCase()}_ADDR + 'h$ids.convertToIDSType($ids.get_prop($ChipObj,"offset"))
`define ${UniqueChipTopName.toUpperCase()}_SIZE 'h$ids.convertToIDSType($ids.get_prop($ChipObj,"size"))
#end
##for blocks
#foreach($BlockChild in $ids.get_all_block($ChipObj))
#BlockDefine($BlockChild $TopNodeChip)
#end
#end
## End Define For Chip

## Start Define For Block
#macro(BlockDefine $BlockObj $TopNodeBlk)
#set($UniqueBlockName=$ids.getUniqueCompName($BlockObj,$TopNodeBlk))
#if($BlockObj == $TopNodeBlk)
`define ${UniqueBlockName.toUpperCase()}_ADDR 'h0
`define ${UniqueBlockName.toUpperCase()}_SIZE 'h$ids.convertToIDSType($ids.get_prop($BlockObj,"size"))
#else
#set($parentNodeBlk=$ids.get_parent($BlockObj))
#if($parentNodeBlk == $TopNodeBlk)
#set($UniqueBlkParentName=$ids.getUniqueCompName($parentNodeBlk,$TopNodeBlk))
#else
#set($UniqueBlkParentName=$ids.get_prop($TopNodeBlk,"name")+"_"+$ids.getUniqueCompName($parentNodeBlk,$TopNodeBlk))
#end
#set($UniqueBlkTopName=$ids.get_prop($TopNodeBlk,"name")+"_"+$ids.getUniqueCompName($BlockObj,$TopNodeBlk))
`define ${UniqueBlkTopName.toUpperCase()}_ADDR `${UniqueBlkParentName.toUpperCase()}_ADDR + 'h$ids.convertToIDSType($ids.get_prop($BlockObj,"offset"))
`define ${UniqueBlkTopName.toUpperCase()}_SIZE 'h$ids.convertToIDSType($ids.get_prop($BlockObj,"size"))
#end
##for register
#foreach($blockchild in $ids.get_objects($BlockObj))
#if($ids.get_type($blockchild)=="reg")
#regDefine($blockchild $TopNodeBlk)
#end
##for For regGroup inside regguoup
#if($ids.get_type($blockchild)=="reggroup")
#SecDefine($blockchild $TopNodeBlk)
#end
#if($ids.get_type($blockchild)=="mem")
#MemDefine($blockchild $TopNodeBlk)
#end
#end
#end
## End Define For Block

## Start Define For Register
#macro(regDefine $regObj $topNodeReg)
#set($parentNodeReg=$ids.get_parent($regObj))
#set($UniqueRegName=$ids.get_prop($topNodeReg,"name")+"_"+$ids.getUniqueCompName($regObj,$topNodeReg))
#if($parentNodeReg == $topNodeReg)
#set($UniqueRegParentName=$ids.getUniqueCompName($parentNodeReg,$topNodeReg))
#else
#set($UniqueRegParentName=$ids.get_prop($topNodeReg,"name")+"_"+$ids.getUniqueCompName($parentNodeReg,$topNodeReg))
#end
`define ${UniqueRegName.toUpperCase()}_ADDR `${UniqueRegParentName.toUpperCase()}_ADDR + 'h$ids.convertToIDSType($ids.get_prop($regObj,"offset"))
`define ${UniqueRegName.toUpperCase()}_DEFAULT #getValue($ids.get_prop($regObj,"default"))
#foreach($fld in $ids.get_fields($regObj))
#set($UniquefldName=$ids.get_prop($topNodeReg,"name")+"_"+$ids.getUniqueCompName($fld,$topNodeReg))
`define ${UniquefldName.toUpperCase()}_MSB $ids.get_prop($fld,"high_offset")
`define ${UniquefldName.toUpperCase()}_LSB $ids.get_prop($fld,"low_offset")
`define ${UniquefldName.toUpperCase()}_DEFAULT 'b$ids.get_prop($fld,"default")
#end
#set($repeat=$ids.get_prop($regObj,"count"))
#if(!$repeat.equals(" "))
`define ${UniqueRegName.toUpperCase()}_REPEAT $repeat
#end
#end
## End Define For Register

## Start Define For Section
#macro(SecDefine $secObj $topNodeSec)
#set($parentNodeSec=$ids.get_parent($secObj))
#set($UniqueSecName=$ids.get_prop($topNodeSec,"name")+"_"+$ids.getUniqueCompName($secObj,$topNodeSec))
#if($parentNodeSec == $topNodeSec)
#set($UniqueSecParentName=$ids.getUniqueCompName($parentNodeSec,$topNodeSec))
#else
#set($UniqueSecParentName=$ids.get_prop($topNodeSec,"name")+"_"+$ids.getUniqueCompName($parentNodeSec,$topNodeSec))
#end
`define ${UniqueSecName.toUpperCase()}_ADDR `${UniqueSecParentName.toUpperCase()}_ADDR + 'h$ids.convertToIDSType($ids.get_prop($secObj,"offset"))
`define ${UniqueSecName.toUpperCase()}_SIZE 'h$ids.convertToIDSType($ids.get_prop($secObj,"size"))
#set($repeat=$ids.get_prop($secObj,"count"))
#if(!$repeat.equals(" "))
`define ${UniqueSecName.toUpperCase()}_REPEAT $repeat
#end
#foreach($secChild in $ids.get_objects($secObj))
#if($ids.get_type($secChild)=="reg")
#regDefine($secChild $topNodeSec)
#elseif($ids.get_type($secChild)=="reggroup")
#SecDefine($secChild $topNodeSec)
#elseif($ids.get_type($secChild)=="mem")
#MemDefine($secChild $topNodeSec)
#end
#end
#end
## End Define For Section

## Start Define For Memory
#macro(MemDefine $MemObj $topNodeMem)
#set($parentNodeMem=$ids.get_parent($MemObj))
#set($UniqueMemName=$ids.get_prop($topNodeMem,"name")+"_"+$ids.getUniqueCompName($MemObj,$topNodeMem))
#if($parentNodeMem == $topNodeMem)
#set($UniqueMemParentName=$ids.getUniqueCompName($parentNodeMem,$topNodeMem))
#else
#set($UniqueMemParentName=$ids.get_prop($topNodeMem,"name")+"_"+$ids.getUniqueCompName($parentNodeMem,$topNodeMem))
#end
`define ${UniqueMemName.toUpperCase()}_ADDR `${UniqueMemParentName.toUpperCase()}_ADDR + 'h$ids.convertToIDSType($ids.get_prop($MemObj,"offset"))
#if ($ids.get_prop($MemObj,"count")==" ")
`define ${UniqueMemName.toUpperCase()}_DEPTH 1
#else
`define ${UniqueMemName.toUpperCase()}_DEPTH $ids.get_prop($MemObj,"count")
#end
`define ${UniqueMemName.toUpperCase().toUpperCase()}_MASK $ids.memMask($ids.get_reg_width($MemObj))
#end
## End Define For Memory

##Convert hex to decimal
#macro(Hex2Dec $value)
#set($Integer = 0)
#set($integetValue= $Integer.parseInt($value))
$integetValue
#end

#macro(getValue $value)
#set( $b = $value.replace("0x", "'h") )
${b}
#end

#macro(memWidth $value)
#set($Integer = 0)
#set($minusvalue = 1)
#set($integetValue= $Integer.parseInt($value))
#set($intValue=${integetValue} - $minusvalue)
$intValue#end

#macro(filler $startaddr $endaddr)


#end