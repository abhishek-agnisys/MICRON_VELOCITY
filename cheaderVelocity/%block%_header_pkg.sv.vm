## My SV Header struct template.
#set($top=$ids.get_top())
$ids.get_header($top)

##########################################################
##            Main Body for SV header package             ##
##########################################################

#set($topname=$ids.get_prop($top,"name"))
##for Block Struct
#if($ids.get_type($top)=="block")
#createPackageBlock($top $top)
#end

#macro(createPackageBlock $BlockObj $TopNodeBlk)
#set($UniqueBlockName=$ids.getUniqueCompName($BlockObj,$TopNodeBlk))

package ${UniqueBlockName}_header_pkg;
#foreach($reg in $ids.get_all_reg($BlockObj))
#if(($ids.get_prop($reg,"type")!="mem") && ($ids.get_prop($ids.get_parent($reg),"type")!="mem"))
#regStruct($reg $TopNodeBlk)
#end
#end
##Start For Section inside section
#foreach($section in $ids.get_all_section($BlockObj))
#sectionStruct($section $TopNodeBlk)
#end
##END For Section inside section
## only for top

typedef struct packed {
#set($filler_pos=0)
#foreach($topChild in $ids.get_objects($top))
#if($ids.get_type($topChild)=="emptyspace")
 logic [$ids.get_filler($ids.get_prop($topChild,"address"),$ids.get_prop($topChild,"endaddress")):0] filler_$filler_pos;
#set($filler_pos=$filler_pos+1)
#end
#if($ids.get_type($topChild)=="reggroup" || $ids.get_type($topChild)=="reg")
#set($UniqueTopRegGrpChildName=$ids.getUniqueCompName($topChild,$TopNodeBlk))
#if($ids.get_prop($topChild,"count").equals(" "))
   ${UniqueTopRegGrpChildName} ${ids.get_prop($topChild,"name")};
#else
   ${UniqueTopRegGrpChildName}[$ids.get_prop($topChild,"count")-1 : 0] ${ids.get_prop($topChild,"name")};
#end
#elseif($ids.get_type($topChild)=="mem")
#if($ids.get_prop($topChild,"count")==" ")
   logic [$ids.mem_width($ids.get_reg_width($topChild)):0] ${ids.get_prop($topChild,"name")};
#else
   logic [$ids.mem_width($ids.get_prop($topChild,"count")):0][$ids.mem_width($ids.get_reg_width($topChild)):0] ${ids.get_prop($topChild,"name")};
#end
  #end
#end
} ${UniqueBlockName};

endpackage
#end

## Start TypeDef Struct for Section Structure
#macro (sectionStruct $secObj $topNodeSec)

#if($ids.get_type($secObj)!="mem")
#set($UniqueSecName=$ids.getUniqueCompName($secObj,$topNodeSec))
typedef struct packed {
#set($parant=${ids.get_parent($secObj)})
#set($filler_pos=0)
#foreach($secObjChild in $ids.get_objects($secObj))
#if($ids.get_type($secObjChild)=="emptyspace")
   logic [$ids.get_filler($ids.get_prop($secObjChild,"address"),$ids.get_prop($secObjChild,"endaddress")):0] filler_$filler_pos;
#set($filler_pos=$filler_pos+1)
#end
#if($ids.get_type($secObjChild)=="reggroup")
#set($UniqueRegGrpChildName=$ids.getUniqueCompName($secObjChild,$topNodeSec))
   ${UniqueRegGrpChildName} ${ids.get_prop($secObjChild,"name")};
#end
#if($ids.get_type($secObjChild)=="reg")
#set($UniqueRegChildName=$ids.getUniqueCompName($secObjChild,$topNodeSec))
#if($ids.get_prop($secObjChild,"count").equals(" "))
    ${UniqueRegChildName} ${ids.get_prop($secObjChild,"name")};
#else
    ${UniqueRegChildName}[$ids.get_prop($secObjChild,"count")-1 : 0] ${ids.get_prop($secObjChild,"name")};
#end
#end
#end
} ${UniqueSecName};

#end
#end
## End Macro for Section Structure



## Start Macro for Register Structure
#macro (regStruct $regObj $topNodeReg)
#set($UniqueRegName=$ids.getUniqueCompName($regObj,$topNodeReg))
/*-------------------------------------------
Reg: ${UniqueRegName.toUpperCase()}
$ids.get_prop($regObj,"doc")
-------------------------------------------*/
#set ($flag="0")
typedef struct packed {
#set($temp = [])
#foreach($fld in $ids.get_objects($regObj))
#if($ids.get_type($fld).equals("padding"))
   logic [$ids.get_prop($fld,"offset")] padding_$ids.get_prop($fld,"high_offset");
#end
#end
#foreach($fld in $ids.getReverseFieldList($regObj))
#if($ids.get_type($fld).equals("field"))
#if($ids.get_prop($fld,"low_offset").equals($ids.get_prop($fld,"high_offset")))
   logic $ids.get_prop($fld,"name");
#else
   logic [$ids.get_prop($fld,"offset")] $ids.get_prop($fld,"name");
#end
#end
#end
} ${UniqueRegName};
#end
## End Macro for Register Structure

